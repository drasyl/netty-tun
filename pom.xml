<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2021 Heiko Bornholdt and Kevin Röbert
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all
  ~ copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  ~ EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  ~ MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
  ~ IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  ~ DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  ~ OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  ~ OR OTHER DEALINGS IN THE SOFTWARE.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.drasyl</groupId>
    <artifactId>netty-tun</artifactId>
    <version>1.3.0-SNAPSHOT</version>

    <name>netty channel communicating via TUN devices</name>
    <description>This artifact contains a Channel implementation that can be used to send or receive packets over a TUN interface.</description>
    <url>https://drasyl.org/</url>

    <inceptionYear>2020</inceptionYear>

    <organization>
        <name>Heiko Bornholdt and Kevin Röbert</name>
        <url>https://drasyl.org/</url>
    </organization>

    <licenses>
        <license>
            <name>MIT License</name>
            <url>https://opensource.org/licenses/MIT</url>
            <distribution>repo</distribution>
        </license>
    </licenses>

    <developers>
        <developer>
            <id>bornholdt</id>
            <name>Heiko Bornholdt</name>
            <email>bornholdt@informatik.uni-hamburg.de</email>
            <organization>Heiko Bornholdt and Kevin Röbert</organization>
            <organizationUrl>https://drasyl.org/</organizationUrl>
            <roles>
                <role>co-founder</role>
                <role>developer</role>
            </roles>
            <timezone>Europe/Berlin</timezone>
        </developer>
        <developer>
            <id>roebert</id>
            <name>Kevin Röbert</name>
            <email>6roebert@informatik.uni-hamburg.de</email>
            <organization>Heiko Bornholdt and Kevin Röbert</organization>
            <organizationUrl>https://drasyl.org/</organizationUrl>
            <roles>
                <role>co-founder</role>
                <role>developer</role>
            </roles>
            <timezone>Europe/Berlin</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:https://github.com/drasyl-overlay/netty-tun.git</connection>
        <developerConnection>scm:git:https://github.com/drasyl-overlay/netty-tun.git</developerConnection>
        <url>https://github.com/drasyl-overlay/netty-tun</url>
        <tag>HEAD</tag>
    </scm>

    <issueManagement>
        <system>GitHub</system>
        <url>https://github.com/drasyl-overlay/netty-tun/issues</url>
    </issueManagement>

    <distributionManagement>
        <repository>
            <id>ossrh</id>
            <name>OSSRH Repo</name>
            <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
        </repository>
        <snapshotRepository>
            <id>ossrh</id>
            <name>OSSRH Snapshot Repo</name>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>

        <javaModuleNameClassifier>${os.detected.name}.${os.detected.arch}</javaModuleNameClassifier>
        <javaModuleName>io.netty.transport.kqueue.${javaModuleNameClassifier}</javaModuleName>
        <jni.compiler.args.cflags>CFLAGS=-O3 -Werror -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden</jni.compiler.args.cflags>
        <jni.compiler.args.ldflags>LDFLAGS=-z now -Wl,--no-whole-archive</jni.compiler.args.ldflags>
        <nativeSourceDirectory>${project.basedir}/src/main/c</nativeSourceDirectory>

        <jni.classifier>${os.detected.name}-${os.detected.arch}</jni.classifier>
    </properties>

    <dependencies>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-transport</artifactId>
            <version>4.1.74.Final</version>
        </dependency>
        <dependency>
            <groupId>net.java.dev.jna</groupId>
            <artifactId>jna</artifactId>
            <version>5.10.0</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.8.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <extensions>
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.0</version>
            </extension>
        </extensions>
    </build>

    <profiles>
        <profile>
            <id>mac</id>
            <activation>
                <os>
                    <family>mac</family>
                </os>
            </activation>
            <properties>
                <jni.compiler.args.ldflags>LDFLAGS=-Wl,-platform_version,macos,10.6,10.6</jni.compiler.args.ldflags>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.fusesource.hawtjni</groupId>
                        <artifactId>maven-hawtjni-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-native-lib</id>
                                <configuration>
                                    <name>netty_transport_native_kqueue_${os.detected.arch}</name>
                                    <nativeSourceDirectory>${nativeSourceDirectory}</nativeSourceDirectory>
                                    <libDirectory>${project.build.outputDirectory}</libDirectory>
                                    <!-- We use Maven's artifact classifier instead.
                                         This hack will make the hawtjni plugin to put the native library
                                         under 'META-INF/native' rather than 'META-INF/native/${platform}'. -->
                                    <platform>.</platform>
                                    <configureArgs>
                                        <arg>${jni.compiler.args.ldflags}</arg>
                                        <arg>${jni.compiler.args.cflags}</arg>
                                        <!-- support for __attribute__((weak_import)) by the linker was added in 10.2 (but 10.6 is the minimum we can use on 10.14) so ensure we
                                             explicitly set the target platform. Otherwise we may get fatal link errors due to weakly linked
                                             methods which are not expected to be present on MacOS (e.g. accept4). -->
                                        <arg>MACOSX_DEPLOYMENT_TARGET=10.6</arg>
                                        <configureArg>--libdir=${project.build.directory}/native-build/target/lib</configureArg>
                                    </configureArgs>
                                </configuration>
                                <goals>
                                    <goal>generate</goal>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <plugin>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <!-- Generate the JAR that contains the native library in it. -->
                            <execution>
                                <id>native-jar</id>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <configuration>
                                    <archive>
                                        <manifest>
                                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                                        </manifest>
                                        <manifestEntries>
                                            <Bundle-NativeCode>META-INF/native/libnetty_transport_native_kqueue_${os.detected.arch}.jnilib; osname=MacOSX; processor=${os.detected.arch}</Bundle-NativeCode>
                                            <Fragment-Host>io.netty.transport-classes-kqueue</Fragment-Host>
                                            <Automatic-Module-Name>${javaModuleName}</Automatic-Module-Name>
                                        </manifestEntries>
                                        <index>true</index>
<!--                                        <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>-->
                                    </archive>
                                    <classifier>${jni.classifier}</classifier>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
